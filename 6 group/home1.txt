Задание:

Создайте программу для управления базой данных студентов и их оценок по разным предметам. Программа должна включать следующие функции и использовать словари и кортежи.

Требования:
Создайте словарь, где ключами будут имена студентов, а значениями — кортежи, содержащие их оценки по предметам (например, математика, физика, литература).

Реализуйте следующие функции:

add_student(student_name, grades): добавляет нового студента с его оценками в базу данных. Параметры:

student_name (str): имя студента.
grades (tuple): кортеж, содержащий оценки по разным предметам.
get_student_grades(student_name): выводит оценки для указанного студента. Параметр:

student_name (str): имя студента.
update_student_grades(student_name, subject_index, new_grade): обновляет оценку по конкретному предмету для указанного студента. Параметры:

student_name (str): имя студента.
subject_index (int): индекс предмета (например, 0 для математики, 1 для физики и т. д.).
new_grade (int): новая оценка.
average_grade(student_name): вычисляет и возвращает среднюю оценку для указанного студента.

Используйте словарь для хранения базы данных студентов, где ключи — это имена студентов, а значения — кортежи с оценками по предметам.

Добавьте в программу меню, позволяющее пользователю добавлять студентов, получать оценки, обновлять их и вычислять средний балл.

Пример работы программы:
python
Копировать код
# Пример словаря с оценками
students = {
    'Алексей': (5, 4, 3),
    'Мария': (4, 5, 5),
    'Иван': (3, 3, 4)
}

# Ожидаемый результат:
# 1. Добавление студента: add_student("Анна", (4, 4, 5))
# 2. Получение оценок студента: get_student_grades("Мария")
# 3. Обновление оценки: update_student_grades("Иван", 1, 5)
# 4. Расчет среднего балла: average_grade("Алексей")
Дополнительные требования (по желанию):
Добавьте проверку на существование студента в базе данных при получении или обновлении его данных.
Реализуйте обработку исключений, если пользователь пытается добавить оценки с неверным количеством предметов или вводит нечисловые данные.